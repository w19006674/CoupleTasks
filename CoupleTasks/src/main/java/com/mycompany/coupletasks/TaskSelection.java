/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.coupletasks;

import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shuhanwali
 */
public class TaskSelection extends javax.swing.JFrame {

    /**
     * Creates new form TaskSelection
     */
    public TaskSelection() {
        initComponents();
    }
    boolean ClothesPress = false;
    boolean BathPress = false;
    boolean CookPress = false;
    boolean MopPress = false;
    boolean GardenPress = false;
    boolean KitchenPress = false;
    boolean BinPress = false;
    boolean VacuumPress = false;
    boolean CarPress = false;
    boolean ShuPress = false;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        CookButton = new javax.swing.JButton();
        BathButton = new javax.swing.JButton();
        ClothesButton = new javax.swing.JButton();
        MopButton = new javax.swing.JButton();
        KitchenButton = new javax.swing.JButton();
        VacuumButton = new javax.swing.JButton();
        CarButton = new javax.swing.JButton();
        GardenButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        BinButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ShuTBL2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ShuTBL1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        Shu = new javax.swing.JButton();
        ShuhanaButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        TextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ShuTextFieldButton = new javax.swing.JButton();
        ShuhanaTextFieldButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setBackground(new java.awt.Color(140, 189, 189));

        CookButton.setBackground(new java.awt.Color(153, 255, 204));
        CookButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CookButton.setForeground(new java.awt.Color(255, 255, 255));
        CookButton.setText("Cook food");
        CookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CookButtonActionPerformed(evt);
            }
        });

        BathButton.setBackground(new java.awt.Color(153, 255, 204));
        BathButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BathButton.setForeground(new java.awt.Color(255, 255, 255));
        BathButton.setText("Clean bathroom");
        BathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BathButtonActionPerformed(evt);
            }
        });

        ClothesButton.setBackground(new java.awt.Color(153, 255, 204));
        ClothesButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ClothesButton.setForeground(new java.awt.Color(255, 255, 255));
        ClothesButton.setText("Clean clothes");
        ClothesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClothesButtonActionPerformed(evt);
            }
        });

        MopButton.setBackground(new java.awt.Color(153, 255, 204));
        MopButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        MopButton.setForeground(new java.awt.Color(255, 255, 255));
        MopButton.setText("Mop floor");
        MopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MopButtonActionPerformed(evt);
            }
        });

        KitchenButton.setBackground(new java.awt.Color(153, 255, 204));
        KitchenButton.setForeground(new java.awt.Color(255, 255, 255));
        KitchenButton.setText("Clean kitchen");
        KitchenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KitchenButtonActionPerformed(evt);
            }
        });

        VacuumButton.setBackground(new java.awt.Color(153, 255, 204));
        VacuumButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        VacuumButton.setForeground(new java.awt.Color(255, 255, 255));
        VacuumButton.setText("Vacuum floor");
        VacuumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VacuumButtonActionPerformed(evt);
            }
        });

        CarButton.setBackground(new java.awt.Color(153, 255, 204));
        CarButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CarButton.setForeground(new java.awt.Color(255, 255, 255));
        CarButton.setText("Clean car");
        CarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarButtonActionPerformed(evt);
            }
        });

        GardenButton.setBackground(new java.awt.Color(153, 255, 204));
        GardenButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        GardenButton.setForeground(new java.awt.Color(255, 255, 255));
        GardenButton.setText("Clean garden");
        GardenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GardenButtonActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(153, 255, 204));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Task Selection");

        BinButton.setBackground(new java.awt.Color(153, 255, 204));
        BinButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BinButton.setForeground(new java.awt.Color(255, 255, 255));
        BinButton.setText("Take bin out");
        BinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinButtonActionPerformed(evt);
            }
        });

        BackButton.setBackground(new java.awt.Color(204, 204, 204));
        BackButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BackButton.setForeground(new java.awt.Color(255, 255, 255));
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        ShuTBL2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Time"
            }
        ));
        jScrollPane1.setViewportView(ShuTBL2);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Shu");

        ShuTBL1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Time"
            }
        ));
        jScrollPane2.setViewportView(ShuTBL1);

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Shuhana");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setText("Users");

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel10.setText("Want To Delete Some Tasks?");

        DeleteButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(0, 102, 102));
        DeleteButton.setText("Delete ");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(178, 178, 178))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(151, 151, 151))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel10))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel6.setText("Please select a task and then click on a user");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel7.setText("to assign them that task");

        jPanel5.setBackground(new java.awt.Color(218, 218, 218));

        Shu.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        Shu.setForeground(new java.awt.Color(0, 102, 102));
        Shu.setText("Shu");
        Shu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShuActionPerformed(evt);
            }
        });

        ShuhanaButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        ShuhanaButton.setForeground(new java.awt.Color(0, 102, 102));
        ShuhanaButton.setText("Shuhana");
        ShuhanaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShuhanaButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Please Click On A User to Assign Your Chosen Task");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(Shu, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(ShuhanaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShuhanaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Shu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        TextField.setForeground(new java.awt.Color(51, 51, 51));
        TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel8.setText("Add A One-Off Task");

        ShuTextFieldButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        ShuTextFieldButton.setForeground(new java.awt.Color(0, 102, 102));
        ShuTextFieldButton.setText("Shu");
        ShuTextFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShuTextFieldButtonActionPerformed(evt);
            }
        });

        ShuhanaTextFieldButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        ShuhanaTextFieldButton.setForeground(new java.awt.Color(0, 102, 102));
        ShuhanaTextFieldButton.setText("Shuhana");
        ShuhanaTextFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShuhanaTextFieldButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel9.setText("Who Will This Task Be Assigned To?");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(ShuTextFieldButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ShuhanaTextFieldButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(163, 163, 163))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShuTextFieldButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(ShuhanaTextFieldButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackButton)
                        .addGap(166, 166, 166)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(125, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(VacuumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(KitchenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(GardenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(MopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ClothesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(CookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(122, 122, 122)))
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackButton)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClothesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VacuumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KitchenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GardenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClothesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClothesButtonActionPerformed
        if (!ClothesPress) {
            ClothesButton.setBackground(Color.gray);
            
           
            
            
        }
            else {
            
            ClothesButton.setBackground(new Color(153,255,204));
        }
        ClothesPress = !ClothesPress;
        
        
        
            
    }//GEN-LAST:event_ClothesButtonActionPerformed

    private void BathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BathButtonActionPerformed
        if (!BathPress) {
            BathButton.setBackground(Color.gray);
        }
            else {
                        BathButton.setBackground(new Color(153,255,204));
        }
        BathPress = !BathPress;
        
        
          /*  //dummy date
            String BathData[] = {"Clean Bathroom","0"};

        //if button is pressed, add clean bathroom to table
       if(BathPress){
        
           //make a connection to ShuTBL
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
            
            //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(BathData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {
           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int b=0; b<= findRow;b++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(b, 0).equals("Clean Bathroom")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(b);
                
                break;
                
        }   
                
       }
                
      }*/
            
    }//GEN-LAST:event_BathButtonActionPerformed

    private void CookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CookButtonActionPerformed
        if (!CookPress) {
            CookButton.setBackground(Color.gray);
        }
            else {
            
            CookButton.setBackground(new Color(153,255,204));
        }
        CookPress = !CookPress;
        
        
           /* //dummy data
            String CookData[] = {"Cook food","0"};
       //if button is pressed, add to table
       if(CookPress){
                   //make connection to ShuTBL 
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
                        //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(CookData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int c=0; c<= findRow;c++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(c, 0).equals("Cook food")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(c);
                
                break;
                
        }   
                
       }
                
      }*/
            
    }//GEN-LAST:event_CookButtonActionPerformed

    private void MopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MopButtonActionPerformed
       
        
       //this button will add and remove Mopping to the database and change the color when pressed.
        
        //if true, turn button to grey
        if (!MopPress) {
            MopButton.setBackground(Color.gray);
        }
            else {
            
            MopButton.setBackground(new Color(153,255,204));
        }
        MopPress = !MopPress;
        
        
            /*//dummy data
            String MopData[] = {"Mop floor","0"};

        //if button is pressed, add mop floor to the table
       if(MopPress){
        
           //make a connection to testertbl1 and testertbl2
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
            
            //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(MopData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {
           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int d=0; d<= findRow;d++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(d, 0).equals("Mop floor")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(d);
                
                break;
                
        }   
                
       }
                
      }*/
            
     
        
        
    }//GEN-LAST:event_MopButtonActionPerformed

    private void GardenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GardenButtonActionPerformed
        if (!GardenPress) {
            GardenButton.setBackground(Color.gray);
        }
            else {
            
            GardenButton.setBackground(new Color(153,255,204));
        }
        GardenPress = !GardenPress;
        
        
          
            
            
    }//GEN-LAST:event_GardenButtonActionPerformed

    private void KitchenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KitchenButtonActionPerformed
        if (!KitchenPress) {
            KitchenButton.setBackground(Color.gray);
        }
            else {
            
            KitchenButton.setBackground(new Color(153,255,204));
        }
        KitchenPress = !KitchenPress;
        
        
           /* //dummy date
            String KitchenData[] = {"Clean Kitchen","0"};

        //if button is pressed, add do mopping to the table
       if(KitchenPress){
        
           //make a connection to ShuTBL
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
            
            //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(KitchenData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {
           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int f=0; f<= findRow;f++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(f, 0).equals("Clean Kitchen")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(f);
                
                break;
                
        }   
                
       }
                
      }*/
            
    }//GEN-LAST:event_KitchenButtonActionPerformed

    private void TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldActionPerformed

    private void BinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BinButtonActionPerformed
        if (!BinPress) {
            BinButton.setBackground(Color.gray);
        }
            else {
            
            BinButton.setBackground(new Color(153,255,204));
        }
        BinPress = !BinPress;
        
        
           /* //dummy date
            String BinData[] = {"Take bin out","0"};

        //if button is pressed, add do mopping to the table
       if(BinPress){
        
           //make a connection to ShuTBL
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
            
            //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(BinData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {
           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int g=0; g<= findRow;g++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(g, 0).equals("Take bin out")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(g);
                
                break;
                
        }   
                
       }
                
      }*/
            
    }//GEN-LAST:event_BinButtonActionPerformed

    private void VacuumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VacuumButtonActionPerformed
           if (!VacuumPress && !ShuPress) {
        VacuumButton.setBackground(Color.gray);   
        
      
 
    } else {
        VacuumButton.setBackground(new Color(153,255,204));
  
    
           }
    
    VacuumPress = !VacuumPress; // Toggle the state
    }//GEN-LAST:event_VacuumButtonActionPerformed

    private void CarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarButtonActionPerformed
        if (!CarPress) {
            CarButton.setBackground(Color.gray);
        }
            else {
            
            CarButton.setBackground(new Color(153,255,204));
        }
        CarPress = !CarPress;
        
        
          /*  //dummy date
            String CarData[] = {"Clean car","0"};

        //if button is pressed, add clean car to the table
       if(CarPress){
        
           //make a connection to ShuTBL
            DefaultTableModel ChoreTBL1= (DefaultTableModel)ShuTBL.getModel();
            
            //add the arraylist into the table using addRow then show a message
            ChoreTBL1.addRow(CarData);
            JOptionPane.showMessageDialog(this, "Task has been added");
           } else {
           
          //remove data added
            DefaultTableModel ChoreTBL1 = (DefaultTableModel)ShuTBL.getModel();
            //get the row with MPNG data
            int findRow= ChoreTBL1.getRowCount()-1;
            //loop through till it equals the data i want
            for(int i=0; i<= findRow;i++) {
                //if the data i want is found, proceed to the following
                if (ChoreTBL1.getValueAt(i, 0).equals("Clean car")) {
                    //remove the row with that data
                ChoreTBL1.removeRow(i);
                
                break;
                
        }   
                
       }
                
      }*/
    }//GEN-LAST:event_CarButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        TaskHome THbutton = new TaskHome();
        
        THbutton.setVisible(true);
        
        this.setVisible(false);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        
        
        DefaultTableModel ShuModel = (DefaultTableModel)ShuTBL2.getModel();
        DefaultTableModel shuhanaModel = (DefaultTableModel)ShuTBL2.getModel();
        
        if (ShuTBL2.getSelectedRowCount()==1) {
            
            
            //remove the selected row from both tables
            ShuModel.removeRow(ShuTBL2.getSelectedRow());
            shuhanaModel.removeRow(ShuTBL2.getSelectedRow());
            

        }
        
            //remove the selected row from both tables
         if (ShuTBL2.getSelectedRowCount()==1) {
            shuhanaModel.removeRow(ShuTBL2.getSelectedRow());
            ShuModel.removeRow(ShuTBL2.getSelectedRow());
        }
        
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ShuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShuActionPerformed
       if (ClothesPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String ClothesTask[] = {"Clean clothes ", "0"};
    ShuModel.addRow(ClothesTask);
    ClothesButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    ClothesPress = false;
    System.out.println("Clothes Button working");
    
    } else if (BathPress) {
    // Add "Bath Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String BathTask[] = {"Clean Bathroom", "0"};
    ShuModel.addRow(BathTask);
    BathButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    BathPress = false;
    System.out.println("Bath Button working");
    
    } else if (CookPress) {
    // Add "Cook Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String CookTask[] = {"Cook food", "0"};
    ShuModel.addRow(CookTask);
    CookButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    CookPress = false;
    System.out.println("Cook Button working");
    
    } else if (MopPress) {
    // Add "Mop Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String MopTask[] = {"Mop floor", "0"};
    ShuModel.addRow(MopTask);
    MopButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    MopPress = false;
    System.out.println("Mop Button working");
    
} else if (GardenPress) {
    // Add "Garden Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String GardenTask[] = {"Do gardening", "0"};
    ShuModel.addRow(GardenTask);
    GardenButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    GardenPress = false;
    System.out.println("Garden Button working");
    
 } else if (KitchenPress) {
    // Add "Kitchen Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String KitchenTask[] = {"Clean kitchen", "0"};
    ShuModel.addRow(KitchenTask);
    KitchenButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added"); 
    KitchenPress = false;
    
    } else if (BinPress) {
    // Add "Bin Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String BinTask[] = {"Take bins out", "0"};
    ShuModel.addRow(BinTask);
    BinButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    BinPress = false;
    
    } else if (VacuumPress) {
    // Add "Vacuum Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String VacuumTask[] = {"Vacuum floor", "0"};
    ShuModel.addRow(VacuumTask);
    VacuumButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    VacuumPress = false;
    
    } else if (CarPress) {
    // Add "Car Task" to ShuTBL
    DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
    String CarTask[] = {"Clean car", "0"};
    ShuModel.addRow(CarTask);
    CarButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    CarPress = false;
    
    
} else {
    // Regular custom chore addition logic
    if (TextField.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Enter Data");
    } else {
        String customData[] = {TextField.getText(), "0"};
        DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
        ShuModel.addRow(customData);
        JOptionPane.showMessageDialog(this, "Task has been added");
        TextField.setText("");
    }
}

    }//GEN-LAST:event_ShuActionPerformed

    private void ShuhanaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShuhanaButtonActionPerformed
        //this button will insert the custom chore to the database and arraylist
        if (ClothesPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String ClothesTask[] = {"Clean clothes ", "0"};
    shuhanaModel.addRow(ClothesTask);
    ClothesButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    System.out.println("Clothes button pressed");
    ClothesPress = false;
    System.out.println("CLOTHES BUTTON WORKING 2");
    
    
     } else if (BathPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String BathTask[] = {"Clean Bathroom", "0"};
    shuhanaModel.addRow(BathTask);
    BathButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    BathPress = false;
    System.out.println("BATH BUTTON WORKING 2");
    
        } else if (CookPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String CookTask[] = {"Cook food", "0"};
    shuhanaModel.addRow(CookTask);
    CookButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    CookPress = false;
    System.out.println("COOK BUTTON WORKING 2");
    
    } else if (MopPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String MopTask[] = {"Mop floor", "0"};
    shuhanaModel.addRow(MopTask);
    MopButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    MopPress = false;
    System.out.println("MOP BUTTON WORKING 2");
    
    } else if (GardenPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String GardenTask[] = {"Do gardening", "0"};
    shuhanaModel.addRow(GardenTask);
    GardenButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    GardenPress = false;
    System.out.println("GARDEN BUTTON WORKING 2");
    
    } else if (KitchenPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String KitchenTask[] = {"Clean kitchen", "0"};
    shuhanaModel.addRow(KitchenTask);
    KitchenButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    KitchenPress = false;
    
    } else if (BinPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String BinTask[] = {"Take bins out", "0"};
    shuhanaModel.addRow(BinTask);
    BinButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    BinPress = false;
    
    } else if (VacuumPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String VacuumTask[] = {"Vacuum Floor ", "0"};
    shuhanaModel.addRow(VacuumTask);
    VacuumButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    VacuumPress = false;
    
    } else if (CarPress) {
    // Add "Clothes Task" to ShuTBL
    DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
    String CarTask[] = {"Clean car", "0"};
    shuhanaModel.addRow(CarTask);
    CarButton.setBackground(new Color(153,255,204));
    JOptionPane.showMessageDialog(this, "Task has been added");
    CarPress = false;
        
        } else {
        //if the text field is empty, show the JPane message. if else proceed
        if(TextField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter Data");
            
        } else {
    // Regular custom chore addition logic
    if (TextField.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Enter Data");
    } else {
        String customData[] = {TextField.getText(), "0"};
        DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
        shuhanaModel.addRow(customData);
        JOptionPane.showMessageDialog(this, "Task has been added");
        TextField.setText("");
       
    }
}}
    }//GEN-LAST:event_ShuhanaButtonActionPerformed

    private void ShuTextFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShuTextFieldButtonActionPerformed
        
        if(TextField.equals(null)){
            JOptionPane.showMessageDialog(this, "Please Enter All Data");
        } else {
            //Create an arraylist so we can insert the custom chore to the db
            
            
            //It will collect whatever is in the customtextfield and assign a set estimate time of 0
            String TextFieldData[] = {TextField.getText(), "0"};
            
            
            //make a conneciton the the 2 tables for Nabil and Ronnella so we can add data
            DefaultTableModel ShuModel = (DefaultTableModel) ShuTBL1.getModel();
            
            
            //add the customData ArrayList to the row
            ShuModel.addRow(TextFieldData);

            
            //Show a message to confirm everything has worked
            JOptionPane.showMessageDialog(this, "Task Added");

            
            //set the customtextfield back to empty
            TextField.setText("");


        }
        
    }//GEN-LAST:event_ShuTextFieldButtonActionPerformed

    private void ShuhanaTextFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShuhanaTextFieldButtonActionPerformed
        
        if(TextField.equals(null)){
            JOptionPane.showMessageDialog(this, "Please Enter All Data");
        } else {
            //Create an arraylist so we can insert the custom chore to the db
            
            
            //It will collect whatever is in the customtextfield and assign a set estimate time of 0
            String TextFieldData[] = {TextField.getText(), "0"};
            
            
            //make a conneciton the the 2 tables for Nabil and Ronnella so we can add data
            DefaultTableModel shuhanaModel = (DefaultTableModel) ShuTBL2.getModel();
            
            
            //add the customData ArrayList to the row
            shuhanaModel.addRow(TextFieldData);

            
            //Show a message to confirm everything has worked
            JOptionPane.showMessageDialog(this, "Task Added");

            
            //set the customtextfield back to empty
            TextField.setText("");


        }
        
    }//GEN-LAST:event_ShuhanaTextFieldButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskSelection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton BathButton;
    private javax.swing.JButton BinButton;
    private javax.swing.JButton CarButton;
    private javax.swing.JButton ClothesButton;
    private javax.swing.JButton CookButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton GardenButton;
    private javax.swing.JButton KitchenButton;
    private javax.swing.JButton MopButton;
    private javax.swing.JButton Shu;
    private javax.swing.JTable ShuTBL1;
    private javax.swing.JTable ShuTBL2;
    private javax.swing.JButton ShuTextFieldButton;
    private javax.swing.JButton ShuhanaButton;
    private javax.swing.JButton ShuhanaTextFieldButton;
    private javax.swing.JTextField TextField;
    private javax.swing.JButton VacuumButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
